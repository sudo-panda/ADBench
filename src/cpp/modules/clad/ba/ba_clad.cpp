#include "ba_clad.h"

// The lines below are generated by clad without any modification using the ba.c 

void sqsum_grad(int n, const double *x, clad::array_ref<double> _d_n, clad::array_ref<double> _d_x) {
  int _d_i = 0;
  double _d_res = 0;
  unsigned long _t0;
  clad::tape<double> _t1 = {};
  clad::tape<int> _t2 = {};
  clad::tape<double> _t4 = {};
  clad::tape<int> _t5 = {};
  int i;
  double res = 0;
  _t0 = 0;
  for (i = 0; i < n; i++) {
    _t0++;
    res = res + clad::push(_t4, x[clad::push(_t2, i)]) * clad::push(_t1, x[clad::push(_t5, i)]);
  }
  double sqsum_return = res;
  goto _label0;
  _label0:
  _d_res += 1;
  for (; _t0; _t0--) {
    {
      double _r_d1 = _d_res;
      _d_res += _r_d1;
      double _r0 = _r_d1 * clad::pop(_t1);
      int _t3 = clad::pop(_t2);
      _d_x[_t3] += _r0;
      double _r1 = clad::pop(_t4) * _r_d1;
      int _t6 = clad::pop(_t5);
      _d_x[_t6] += _r1;
      _d_res -= _r_d1;
    }
  }
}

void compute_reproj_error0_grad(const double *cam, const double *X, const double w, const double *feat, clad::array_ref<double> _d_cam, clad::array_ref<double> _d_X, clad::array_ref<double> _d_w, clad::array_ref<double> _d_feat) {
  clad::array<double> _d_proj(2UL);
  clad::array<double> _d_Xo(3UL), _d_Xcam(3UL);
  int _d_i = 0;
  const double *_t0;
  double _d_sqtheta = 0;
  bool _cond0;
  double _d_theta = 0, _d_costheta = 0, _d_sintheta = 0, _d_theta_inverse = 0, _d_tmp = 0;
  clad::array<double> _d_w_local(3UL), _d_w_cross_pt(3UL);
  double _t1;
  double _t2;
  double _t3;
  double _t4;
  unsigned long _t5;
  clad::tape<int> _t6 = {};
  clad::tape<double> _t8 = {};
  clad::tape<int> _t9 = {};
  clad::tape<double> _t11 = {};
  double _t12;
  double _t13;
  double _t14;
  double _t15;
  double _t16;
  double _t17;
  double _t18;
  double _t19;
  double _t20;
  double _t21;
  double _t22;
  double _t23;
  double _t24;
  double _t25;
  double _t26;
  double _t27;
  double _t28;
  double _t29;
  double _t30;
  double _t31;
  unsigned long _t32;
  clad::tape<int> _t33 = {};
  clad::tape<double> _t35 = {};
  clad::tape<int> _t36 = {};
  clad::tape<double> _t38 = {};
  clad::tape<double> _t39 = {};
  clad::tape<int> _t40 = {};
  clad::tape<double> _t42 = {};
  clad::tape<double> _t43 = {};
  clad::tape<int> _t44 = {};
  clad::tape<double> _t46 = {};
  clad::array<double> _d_rot_cross_pt(3UL);
  double _t47;
  double _t48;
  double _t49;
  double _t50;
  double _t51;
  double _t52;
  double _t53;
  double _t54;
  double _t55;
  double _t56;
  double _t57;
  double _t58;
  unsigned long _t59;
  clad::tape<int> _t60 = {};
  clad::tape<int> _t62 = {};
  clad::tape<int> _t64 = {};
  double _t66;
  double _t67;
  double _t68;
  double _t69;
  double _d_rsq = 0, _d_L = 0;
  clad::array<double> _t70(2UL);
  double _t71;
  double _t72;
  double _t73;
  double _t74;
  double _t75;
  double _t76;
  double _t77;
  double _t78;
  double _t79;
  double _t80;
  double _t81;
  double _t82;
  double proj[2];
  double Xo[3], Xcam[3];
  Xo[0] = X[0] - cam[3];
  Xo[1] = X[1] - cam[4];
  Xo[2] = X[2] - cam[5];
  int i;
  _t0 = cam;
  double sqtheta = sqsum(3, _t0);
  _cond0 = sqtheta != 0;
  if (_cond0) {
    double theta, costheta, sintheta, theta_inverse, tmp;
    double w_local[3], w_cross_pt[3];
    _t1 = sqtheta;
    theta = sqrt(_t1);
    _t2 = theta;
    costheta = cos(_t2);
    _t3 = theta;
    sintheta = sin(_t3);
    _t4 = theta;
    theta_inverse = 1. / _t4;
    _t5 = 0;
    for (i = 0; i < 3; i++) {
      _t5++;
      w_local[clad::push(_t6, i)] = clad::push(_t11, cam[clad::push(_t9, i)]) * clad::push(_t8, theta_inverse);
    }
    _t13 = w_local[1];
    _t12 = Xo[2];
    _t15 = w_local[2];
    _t14 = Xo[1];
    w_cross_pt[0] = _t13 * _t12 - _t15 * _t14;
    _t17 = w_local[2];
    _t16 = Xo[0];
    _t19 = w_local[0];
    _t18 = Xo[2];
    w_cross_pt[1] = _t17 * _t16 - _t19 * _t18;
    _t21 = w_local[0];
    _t20 = Xo[1];
    _t23 = w_local[1];
    _t22 = Xo[0];
    w_cross_pt[2] = _t21 * _t20 - _t23 * _t22;
    _t26 = w_local[0];
    _t25 = Xo[0];
    _t28 = w_local[1];
    _t27 = Xo[1];
    _t30 = w_local[2];
    _t29 = Xo[2];
    _t31 = (_t26 * _t25 + _t28 * _t27 + _t30 * _t29);
    _t24 = (1. - costheta);
    tmp = _t31 * _t24;
    _t32 = 0;
    for (i = 0; i < 3; i++) {
      _t32++;
      Xcam[clad::push(_t33, i)] = clad::push(_t38, Xo[clad::push(_t36, i)]) * clad::push(_t35, costheta) + clad::push(_t42, w_cross_pt[clad::push(_t40, i)]) * clad::push(_t39, sintheta) + clad::push(_t46, w_local[clad::push(_t44, i)]) * clad::push(_t43, tmp);
    }
  } else {
    double rot_cross_pt[3];
    _t48 = cam[1];
    _t47 = Xo[2];
    _t50 = cam[2];
    _t49 = Xo[1];
    rot_cross_pt[0] = _t48 * _t47 - _t50 * _t49;
    _t52 = cam[2];
    _t51 = Xo[0];
    _t54 = cam[0];
    _t53 = Xo[2];
    rot_cross_pt[1] = _t52 * _t51 - _t54 * _t53;
    _t56 = cam[0];
    _t55 = Xo[1];
    _t58 = cam[1];
    _t57 = Xo[0];
    rot_cross_pt[2] = _t56 * _t55 - _t58 * _t57;
    _t59 = 0;
    for (i = 0; i < 3; i++) {
      _t59++;
      Xcam[clad::push(_t60, i)] = Xo[clad::push(_t62, i)] + rot_cross_pt[clad::push(_t64, i)];
    }
  }
  _t67 = Xcam[0];
  _t66 = Xcam[2];
  proj[0] = _t67 / _t66;
  _t69 = Xcam[1];
  _t68 = Xcam[2];
  proj[1] = _t69 / _t68;
  double rsq, L;
  _t70 = proj;
  rsq = sqsum(2, _t70);
  _t72 = cam[9];
  _t71 = rsq;
  _t75 = cam[10];
  _t74 = rsq;
  _t76 = _t75 * _t74;
  _t73 = rsq;
  L = 1. + _t72 * _t71 + _t76 * _t73;
  _t78 = proj[0];
  _t77 = L;
  proj[0] = _t78 * _t77;
  _t80 = proj[0];
  _t79 = cam[6];
  proj[0] = _t80 * _t79 + cam[7];
  _t82 = w;
  _t81 = (proj[0] - feat[0]);
  double compute_reproj_error0_return = _t82 * _t81;
  goto _label0;
  _label0:
  {
    double _r63 = 1 * _t81;
    * _d_w += _r63;
    double _r64 = _t82 * 1;
    _d_proj[0] += _r64;
    _d_feat[0] += -_r64;
  }
  {
    double _r_d25 = _d_proj[0];
    double _r61 = _r_d25 * _t79;
    _d_proj[0] += _r61;
    double _r62 = _t80 * _r_d25;
    _d_cam[6] += _r62;
    _d_cam[7] += _r_d25;
    _d_proj[0] -= _r_d25;
    _d_proj[0];
  }
  {
    double _r_d24 = _d_proj[0];
    double _r59 = _r_d24 * _t77;
    _d_proj[0] += _r59;
    double _r60 = _t78 * _r_d24;
    _d_L += _r60;
    _d_proj[0] -= _r_d24;
    _d_proj[0];
  }
  {
    double _r_d23 = _d_L;
    double _r53 = _r_d23 * _t71;
    _d_cam[9] += _r53;
    double _r54 = _t72 * _r_d23;
    _d_rsq += _r54;
    double _r55 = _r_d23 * _t73;
    double _r56 = _r55 * _t74;
    _d_cam[10] += _r56;
    double _r57 = _t75 * _r55;
    _d_rsq += _r57;
    double _r58 = _t76 * _r_d23;
    _d_rsq += _r58;
    _d_L -= _r_d23;
  }
  {
    double _r_d22 = _d_rsq;
    double _grad2 = 0.;
    clad::array<double> _grad3(_d_proj.size());
    sqsum_grad(2, _t70, &_grad2, _grad3);
    double _r51 = _r_d22 * _grad2;
    clad::array_ref<double> _r52(_grad3 *= _r_d22);
    _d_proj += _r52;
    _d_rsq -= _r_d22;
  }
  {
    double _r_d21 = _d_proj[1];
    double _r49 = _r_d21 / _t68;
    _d_Xcam[1] += _r49;
    double _r50 = _r_d21 * -_t69 / (_t68 * _t68);
    _d_Xcam[2] += _r50;
    _d_proj[1] -= _r_d21;
    _d_proj[1];
  }
  {
    double _r_d20 = _d_proj[0];
    double _r47 = _r_d20 / _t66;
    _d_Xcam[0] += _r47;
    double _r48 = _r_d20 * -_t67 / (_t66 * _t66);
    _d_Xcam[2] += _r48;
    _d_proj[0] -= _r_d20;
    _d_proj[0];
  }
  if (_cond0) {
    for (; _t32; _t32--) {
      {
        int _t34 = clad::pop(_t33);
        double _r_d14 = _d_Xcam[_t34];
        double _r29 = _r_d14 * clad::pop(_t35);
        int _t37 = clad::pop(_t36);
        _d_Xo[_t37] += _r29;
        double _r30 = clad::pop(_t38) * _r_d14;
        _d_costheta += _r30;
        double _r31 = _r_d14 * clad::pop(_t39);
        int _t41 = clad::pop(_t40);
        _d_w_cross_pt[_t41] += _r31;
        double _r32 = clad::pop(_t42) * _r_d14;
        _d_sintheta += _r32;
        double _r33 = _r_d14 * clad::pop(_t43);
        int _t45 = clad::pop(_t44);
        _d_w_local[_t45] += _r33;
        double _r34 = clad::pop(_t46) * _r_d14;
        _d_tmp += _r34;
        _d_Xcam[_t34] -= _r_d14;
        _d_Xcam[_t34];
      }
    }
    {
      double _r_d12 = _d_tmp;
      double _r21 = _r_d12 * _t24;
      double _r22 = _r21 * _t25;
      _d_w_local[0] += _r22;
      double _r23 = _t26 * _r21;
      _d_Xo[0] += _r23;
      double _r24 = _r21 * _t27;
      _d_w_local[1] += _r24;
      double _r25 = _t28 * _r21;
      _d_Xo[1] += _r25;
      double _r26 = _r21 * _t29;
      _d_w_local[2] += _r26;
      double _r27 = _t30 * _r21;
      _d_Xo[2] += _r27;
      double _r28 = _t31 * _r_d12;
      _d_costheta += -_r28;
      _d_tmp -= _r_d12;
    }
    {
      double _r_d11 = _d_w_cross_pt[2];
      double _r17 = _r_d11 * _t20;
      _d_w_local[0] += _r17;
      double _r18 = _t21 * _r_d11;
      _d_Xo[1] += _r18;
      double _r19 = -_r_d11 * _t22;
      _d_w_local[1] += _r19;
      double _r20 = _t23 * -_r_d11;
      _d_Xo[0] += _r20;
      _d_w_cross_pt[2] -= _r_d11;
      _d_w_cross_pt[2];
    }
    {
      double _r_d10 = _d_w_cross_pt[1];
      double _r13 = _r_d10 * _t16;
      _d_w_local[2] += _r13;
      double _r14 = _t17 * _r_d10;
      _d_Xo[0] += _r14;
      double _r15 = -_r_d10 * _t18;
      _d_w_local[0] += _r15;
      double _r16 = _t19 * -_r_d10;
      _d_Xo[2] += _r16;
      _d_w_cross_pt[1] -= _r_d10;
      _d_w_cross_pt[1];
    }
    {
      double _r_d9 = _d_w_cross_pt[0];
      double _r9 = _r_d9 * _t12;
      _d_w_local[1] += _r9;
      double _r10 = _t13 * _r_d9;
      _d_Xo[2] += _r10;
      double _r11 = -_r_d9 * _t14;
      _d_w_local[2] += _r11;
      double _r12 = _t15 * -_r_d9;
      _d_Xo[1] += _r12;
      _d_w_cross_pt[0] -= _r_d9;
      _d_w_cross_pt[0];
    }
    for (; _t5; _t5--) {
      {
        int _t7 = clad::pop(_t6);
        double _r_d8 = _d_w_local[_t7];
        double _r7 = _r_d8 * clad::pop(_t8);
        int _t10 = clad::pop(_t9);
        _d_cam[_t10] += _r7;
        double _r8 = clad::pop(_t11) * _r_d8;
        _d_theta_inverse += _r8;
        _d_w_local[_t7] -= _r_d8;
        _d_w_local[_t7];
      }
    }
    {
      double _r_d6 = _d_theta_inverse;
      double _r5 = _r_d6 / _t4;
      double _r6 = _r_d6 * -1. / (_t4 * _t4);
      _d_theta += _r6;
      _d_theta_inverse -= _r_d6;
    }
    {
      double _r_d5 = _d_sintheta;
      double _r4 = _r_d5 * custom_derivatives::sin_darg0(_t3);
      _d_theta += _r4;
      _d_sintheta -= _r_d5;
    }
    {
      double _r_d4 = _d_costheta;
      double _r3 = _r_d4 * custom_derivatives::cos_darg0(_t2);
      _d_theta += _r3;
      _d_costheta -= _r_d4;
    }
    {
      double _r_d3 = _d_theta;
      double _r2 = _r_d3 * custom_derivatives::sqrt_darg0(_t1);
      _d_sqtheta += _r2;
      _d_theta -= _r_d3;
    }
  } else {
    for (; _t59; _t59--) {
      {
        int _t61 = clad::pop(_t60);
        double _r_d19 = _d_Xcam[_t61];
        int _t63 = clad::pop(_t62);
        _d_Xo[_t63] += _r_d19;
        int _t65 = clad::pop(_t64);
        _d_rot_cross_pt[_t65] += _r_d19;
        _d_Xcam[_t61] -= _r_d19;
        _d_Xcam[_t61];
      }
    }
    {
      double _r_d17 = _d_rot_cross_pt[2];
      double _r43 = _r_d17 * _t55;
      _d_cam[0] += _r43;
      double _r44 = _t56 * _r_d17;
      _d_Xo[1] += _r44;
      double _r45 = -_r_d17 * _t57;
      _d_cam[1] += _r45;
      double _r46 = _t58 * -_r_d17;
      _d_Xo[0] += _r46;
      _d_rot_cross_pt[2] -= _r_d17;
      _d_rot_cross_pt[2];
    }
    {
      double _r_d16 = _d_rot_cross_pt[1];
      double _r39 = _r_d16 * _t51;
      _d_cam[2] += _r39;
      double _r40 = _t52 * _r_d16;
      _d_Xo[0] += _r40;
      double _r41 = -_r_d16 * _t53;
      _d_cam[0] += _r41;
      double _r42 = _t54 * -_r_d16;
      _d_Xo[2] += _r42;
      _d_rot_cross_pt[1] -= _r_d16;
      _d_rot_cross_pt[1];
    }
    {
      double _r_d15 = _d_rot_cross_pt[0];
      double _r35 = _r_d15 * _t47;
      _d_cam[1] += _r35;
      double _r36 = _t48 * _r_d15;
      _d_Xo[2] += _r36;
      double _r37 = -_r_d15 * _t49;
      _d_cam[2] += _r37;
      double _r38 = _t50 * -_r_d15;
      _d_Xo[1] += _r38;
      _d_rot_cross_pt[0] -= _r_d15;
      _d_rot_cross_pt[0];
    }
  }
  {
    double _grad0 = 0.;
    clad::array<double> _grad1(_d_cam.size());
    sqsum_grad(3, _t0, &_grad0, _grad1);
    double _r0 = _d_sqtheta * _grad0;
    clad::array_ref<double> _r1(_grad1 *= _d_sqtheta);
    _d_cam += _r1;
  }
  {
    double _r_d2 = _d_Xo[2];
    _d_X[2] += _r_d2;
    _d_cam[5] += -_r_d2;
    _d_Xo[2] -= _r_d2;
    _d_Xo[2];
  }
  {
    double _r_d1 = _d_Xo[1];
    _d_X[1] += _r_d1;
    _d_cam[4] += -_r_d1;
    _d_Xo[1] -= _r_d1;
    _d_Xo[1];
  }
  {
    double _r_d0 = _d_Xo[0];
    _d_X[0] += _r_d0;
    _d_cam[3] += -_r_d0;
    _d_Xo[0] -= _r_d0;
    _d_Xo[0];
  }
}

void compute_reproj_error1_grad(const double *cam, const double *X, const double w, const double *feat, clad::array_ref<double> _d_cam, clad::array_ref<double> _d_X, clad::array_ref<double> _d_w, clad::array_ref<double> _d_feat) {
  clad::array<double> _d_proj(2UL);
  clad::array<double> _d_Xo(3UL), _d_Xcam(3UL);
  int _d_i = 0;
  const double *_t0;
  double _d_sqtheta = 0;
  bool _cond0;
  double _d_theta = 0, _d_costheta = 0, _d_sintheta = 0, _d_theta_inverse = 0, _d_tmp = 0;
  clad::array<double> _d_w_local(3UL), _d_w_cross_pt(3UL);
  double _t1;
  double _t2;
  double _t3;
  double _t4;
  unsigned long _t5;
  clad::tape<int> _t6 = {};
  clad::tape<double> _t8 = {};
  clad::tape<int> _t9 = {};
  clad::tape<double> _t11 = {};
  double _t12;
  double _t13;
  double _t14;
  double _t15;
  double _t16;
  double _t17;
  double _t18;
  double _t19;
  double _t20;
  double _t21;
  double _t22;
  double _t23;
  double _t24;
  double _t25;
  double _t26;
  double _t27;
  double _t28;
  double _t29;
  double _t30;
  double _t31;
  unsigned long _t32;
  clad::tape<int> _t33 = {};
  clad::tape<double> _t35 = {};
  clad::tape<int> _t36 = {};
  clad::tape<double> _t38 = {};
  clad::tape<double> _t39 = {};
  clad::tape<int> _t40 = {};
  clad::tape<double> _t42 = {};
  clad::tape<double> _t43 = {};
  clad::tape<int> _t44 = {};
  clad::tape<double> _t46 = {};
  clad::array<double> _d_rot_cross_pt(3UL);
  double _t47;
  double _t48;
  double _t49;
  double _t50;
  double _t51;
  double _t52;
  double _t53;
  double _t54;
  double _t55;
  double _t56;
  double _t57;
  double _t58;
  unsigned long _t59;
  clad::tape<int> _t60 = {};
  clad::tape<int> _t62 = {};
  clad::tape<int> _t64 = {};
  double _t66;
  double _t67;
  double _t68;
  double _t69;
  double _d_rsq = 0, _d_L = 0;
  clad::array<double> _t70(2UL);
  double _t71;
  double _t72;
  double _t73;
  double _t74;
  double _t75;
  double _t76;
  double _t77;
  double _t78;
  double _t79;
  double _t80;
  double _t81;
  double _t82;
  double proj[2];
  double Xo[3], Xcam[3];
  Xo[0] = X[0] - cam[3];
  Xo[1] = X[1] - cam[4];
  Xo[2] = X[2] - cam[5];
  int i;
  _t0 = cam;
  double sqtheta = sqsum(3, _t0);
  _cond0 = sqtheta != 0;
  if (_cond0) {
    double theta, costheta, sintheta, theta_inverse, tmp;
    double w_local[3], w_cross_pt[3];
    _t1 = sqtheta;
    theta = sqrt(_t1);
    _t2 = theta;
    costheta = cos(_t2);
    _t3 = theta;
    sintheta = sin(_t3);
    _t4 = theta;
    theta_inverse = 1. / _t4;
    _t5 = 0;
    for (i = 0; i < 3; i++) {
      _t5++;
      w_local[clad::push(_t6, i)] = clad::push(_t11, cam[clad::push(_t9, i)]) * clad::push(_t8, theta_inverse);
    }
    _t13 = w_local[1];
    _t12 = Xo[2];
    _t15 = w_local[2];
    _t14 = Xo[1];
    w_cross_pt[0] = _t13 * _t12 - _t15 * _t14;
    _t17 = w_local[2];
    _t16 = Xo[0];
    _t19 = w_local[0];
    _t18 = Xo[2];
    w_cross_pt[1] = _t17 * _t16 - _t19 * _t18;
    _t21 = w_local[0];
    _t20 = Xo[1];
    _t23 = w_local[1];
    _t22 = Xo[0];
    w_cross_pt[2] = _t21 * _t20 - _t23 * _t22;
    _t26 = w_local[0];
    _t25 = Xo[0];
    _t28 = w_local[1];
    _t27 = Xo[1];
    _t30 = w_local[2];
    _t29 = Xo[2];
    _t31 = (_t26 * _t25 + _t28 * _t27 + _t30 * _t29);
    _t24 = (1. - costheta);
    tmp = _t31 * _t24;
    _t32 = 0;
    for (i = 0; i < 3; i++) {
      _t32++;
      Xcam[clad::push(_t33, i)] = clad::push(_t38, Xo[clad::push(_t36, i)]) * clad::push(_t35, costheta) + clad::push(_t42, w_cross_pt[clad::push(_t40, i)]) * clad::push(_t39, sintheta) + clad::push(_t46, w_local[clad::push(_t44, i)]) * clad::push(_t43, tmp);
    }
  } else {
    double rot_cross_pt[3];
    _t48 = cam[1];
    _t47 = Xo[2];
    _t50 = cam[2];
    _t49 = Xo[1];
    rot_cross_pt[0] = _t48 * _t47 - _t50 * _t49;
    _t52 = cam[2];
    _t51 = Xo[0];
    _t54 = cam[0];
    _t53 = Xo[2];
    rot_cross_pt[1] = _t52 * _t51 - _t54 * _t53;
    _t56 = cam[0];
    _t55 = Xo[1];
    _t58 = cam[1];
    _t57 = Xo[0];
    rot_cross_pt[2] = _t56 * _t55 - _t58 * _t57;
    _t59 = 0;
    for (i = 0; i < 3; i++) {
      _t59++;
      Xcam[clad::push(_t60, i)] = Xo[clad::push(_t62, i)] + rot_cross_pt[clad::push(_t64, i)];
    }
  }
  _t67 = Xcam[0];
  _t66 = Xcam[2];
  proj[0] = _t67 / _t66;
  _t69 = Xcam[1];
  _t68 = Xcam[2];
  proj[1] = _t69 / _t68;
  double rsq, L;
  _t70 = proj;
  rsq = sqsum(2, _t70);
  _t72 = cam[9];
  _t71 = rsq;
  _t75 = cam[10];
  _t74 = rsq;
  _t76 = _t75 * _t74;
  _t73 = rsq;
  L = 1. + _t72 * _t71 + _t76 * _t73;
  _t78 = proj[1];
  _t77 = L;
  proj[1] = _t78 * _t77;
  _t80 = proj[1];
  _t79 = cam[6];
  proj[1] = _t80 * _t79 + cam[8];
  _t82 = w;
  _t81 = (proj[1] - feat[1]);
  double compute_reproj_error1_return = _t82 * _t81;
  goto _label0;
  _label0:
  {
    double _r63 = 1 * _t81;
    * _d_w += _r63;
    double _r64 = _t82 * 1;
    _d_proj[1] += _r64;
    _d_feat[1] += -_r64;
  }
  {
    double _r_d25 = _d_proj[1];
    double _r61 = _r_d25 * _t79;
    _d_proj[1] += _r61;
    double _r62 = _t80 * _r_d25;
    _d_cam[6] += _r62;
    _d_cam[8] += _r_d25;
    _d_proj[1] -= _r_d25;
    _d_proj[1];
  }
  {
    double _r_d24 = _d_proj[1];
    double _r59 = _r_d24 * _t77;
    _d_proj[1] += _r59;
    double _r60 = _t78 * _r_d24;
    _d_L += _r60;
    _d_proj[1] -= _r_d24;
    _d_proj[1];
  }
  {
    double _r_d23 = _d_L;
    double _r53 = _r_d23 * _t71;
    _d_cam[9] += _r53;
    double _r54 = _t72 * _r_d23;
    _d_rsq += _r54;
    double _r55 = _r_d23 * _t73;
    double _r56 = _r55 * _t74;
    _d_cam[10] += _r56;
    double _r57 = _t75 * _r55;
    _d_rsq += _r57;
    double _r58 = _t76 * _r_d23;
    _d_rsq += _r58;
    _d_L -= _r_d23;
  }
  {
    double _r_d22 = _d_rsq;
    double _grad2 = 0.;
    clad::array<double> _grad3(_d_proj.size());
    sqsum_grad(2, _t70, &_grad2, _grad3);
    double _r51 = _r_d22 * _grad2;
    clad::array_ref<double> _r52(_grad3 *= _r_d22);
    _d_proj += _r52;
    _d_rsq -= _r_d22;
  }
  {
    double _r_d21 = _d_proj[1];
    double _r49 = _r_d21 / _t68;
    _d_Xcam[1] += _r49;
    double _r50 = _r_d21 * -_t69 / (_t68 * _t68);
    _d_Xcam[2] += _r50;
    _d_proj[1] -= _r_d21;
    _d_proj[1];
  }
  {
    double _r_d20 = _d_proj[0];
    double _r47 = _r_d20 / _t66;
    _d_Xcam[0] += _r47;
    double _r48 = _r_d20 * -_t67 / (_t66 * _t66);
    _d_Xcam[2] += _r48;
    _d_proj[0] -= _r_d20;
    _d_proj[0];
  }
  if (_cond0) {
    for (; _t32; _t32--) {
      {
        int _t34 = clad::pop(_t33);
        double _r_d14 = _d_Xcam[_t34];
        double _r29 = _r_d14 * clad::pop(_t35);
        int _t37 = clad::pop(_t36);
        _d_Xo[_t37] += _r29;
        double _r30 = clad::pop(_t38) * _r_d14;
        _d_costheta += _r30;
        double _r31 = _r_d14 * clad::pop(_t39);
        int _t41 = clad::pop(_t40);
        _d_w_cross_pt[_t41] += _r31;
        double _r32 = clad::pop(_t42) * _r_d14;
        _d_sintheta += _r32;
        double _r33 = _r_d14 * clad::pop(_t43);
        int _t45 = clad::pop(_t44);
        _d_w_local[_t45] += _r33;
        double _r34 = clad::pop(_t46) * _r_d14;
        _d_tmp += _r34;
        _d_Xcam[_t34] -= _r_d14;
        _d_Xcam[_t34];
      }
    }
    {
      double _r_d12 = _d_tmp;
      double _r21 = _r_d12 * _t24;
      double _r22 = _r21 * _t25;
      _d_w_local[0] += _r22;
      double _r23 = _t26 * _r21;
      _d_Xo[0] += _r23;
      double _r24 = _r21 * _t27;
      _d_w_local[1] += _r24;
      double _r25 = _t28 * _r21;
      _d_Xo[1] += _r25;
      double _r26 = _r21 * _t29;
      _d_w_local[2] += _r26;
      double _r27 = _t30 * _r21;
      _d_Xo[2] += _r27;
      double _r28 = _t31 * _r_d12;
      _d_costheta += -_r28;
      _d_tmp -= _r_d12;
    }
    {
      double _r_d11 = _d_w_cross_pt[2];
      double _r17 = _r_d11 * _t20;
      _d_w_local[0] += _r17;
      double _r18 = _t21 * _r_d11;
      _d_Xo[1] += _r18;
      double _r19 = -_r_d11 * _t22;
      _d_w_local[1] += _r19;
      double _r20 = _t23 * -_r_d11;
      _d_Xo[0] += _r20;
      _d_w_cross_pt[2] -= _r_d11;
      _d_w_cross_pt[2];
    }
    {
      double _r_d10 = _d_w_cross_pt[1];
      double _r13 = _r_d10 * _t16;
      _d_w_local[2] += _r13;
      double _r14 = _t17 * _r_d10;
      _d_Xo[0] += _r14;
      double _r15 = -_r_d10 * _t18;
      _d_w_local[0] += _r15;
      double _r16 = _t19 * -_r_d10;
      _d_Xo[2] += _r16;
      _d_w_cross_pt[1] -= _r_d10;
      _d_w_cross_pt[1];
    }
    {
      double _r_d9 = _d_w_cross_pt[0];
      double _r9 = _r_d9 * _t12;
      _d_w_local[1] += _r9;
      double _r10 = _t13 * _r_d9;
      _d_Xo[2] += _r10;
      double _r11 = -_r_d9 * _t14;
      _d_w_local[2] += _r11;
      double _r12 = _t15 * -_r_d9;
      _d_Xo[1] += _r12;
      _d_w_cross_pt[0] -= _r_d9;
      _d_w_cross_pt[0];
    }
    for (; _t5; _t5--) {
      {
        int _t7 = clad::pop(_t6);
        double _r_d8 = _d_w_local[_t7];
        double _r7 = _r_d8 * clad::pop(_t8);
        int _t10 = clad::pop(_t9);
        _d_cam[_t10] += _r7;
        double _r8 = clad::pop(_t11) * _r_d8;
        _d_theta_inverse += _r8;
        _d_w_local[_t7] -= _r_d8;
        _d_w_local[_t7];
      }
    }
    {
      double _r_d6 = _d_theta_inverse;
      double _r5 = _r_d6 / _t4;
      double _r6 = _r_d6 * -1. / (_t4 * _t4);
      _d_theta += _r6;
      _d_theta_inverse -= _r_d6;
    }
    {
      double _r_d5 = _d_sintheta;
      double _r4 = _r_d5 * custom_derivatives::sin_darg0(_t3);
      _d_theta += _r4;
      _d_sintheta -= _r_d5;
    }
    {
      double _r_d4 = _d_costheta;
      double _r3 = _r_d4 * custom_derivatives::cos_darg0(_t2);
      _d_theta += _r3;
      _d_costheta -= _r_d4;
    }
    {
      double _r_d3 = _d_theta;
      double _r2 = _r_d3 * custom_derivatives::sqrt_darg0(_t1);
      _d_sqtheta += _r2;
      _d_theta -= _r_d3;
    }
  } else {
    for (; _t59; _t59--) {
      {
        int _t61 = clad::pop(_t60);
        double _r_d19 = _d_Xcam[_t61];
        int _t63 = clad::pop(_t62);
        _d_Xo[_t63] += _r_d19;
        int _t65 = clad::pop(_t64);
        _d_rot_cross_pt[_t65] += _r_d19;
        _d_Xcam[_t61] -= _r_d19;
        _d_Xcam[_t61];
      }
    }
    {
      double _r_d17 = _d_rot_cross_pt[2];
      double _r43 = _r_d17 * _t55;
      _d_cam[0] += _r43;
      double _r44 = _t56 * _r_d17;
      _d_Xo[1] += _r44;
      double _r45 = -_r_d17 * _t57;
      _d_cam[1] += _r45;
      double _r46 = _t58 * -_r_d17;
      _d_Xo[0] += _r46;
      _d_rot_cross_pt[2] -= _r_d17;
      _d_rot_cross_pt[2];
    }
    {
      double _r_d16 = _d_rot_cross_pt[1];
      double _r39 = _r_d16 * _t51;
      _d_cam[2] += _r39;
      double _r40 = _t52 * _r_d16;
      _d_Xo[0] += _r40;
      double _r41 = -_r_d16 * _t53;
      _d_cam[0] += _r41;
      double _r42 = _t54 * -_r_d16;
      _d_Xo[2] += _r42;
      _d_rot_cross_pt[1] -= _r_d16;
      _d_rot_cross_pt[1];
    }
    {
      double _r_d15 = _d_rot_cross_pt[0];
      double _r35 = _r_d15 * _t47;
      _d_cam[1] += _r35;
      double _r36 = _t48 * _r_d15;
      _d_Xo[2] += _r36;
      double _r37 = -_r_d15 * _t49;
      _d_cam[2] += _r37;
      double _r38 = _t50 * -_r_d15;
      _d_Xo[1] += _r38;
      _d_rot_cross_pt[0] -= _r_d15;
      _d_rot_cross_pt[0];
    }
  }
  {
    double _grad0 = 0.;
    clad::array<double> _grad1(_d_cam.size());
    sqsum_grad(3, _t0, &_grad0, _grad1);
    double _r0 = _d_sqtheta * _grad0;
    clad::array_ref<double> _r1(_grad1 *= _d_sqtheta);
    _d_cam += _r1;
  }
  {
    double _r_d2 = _d_Xo[2];
    _d_X[2] += _r_d2;
    _d_cam[5] += -_r_d2;
    _d_Xo[2] -= _r_d2;
    _d_Xo[2];
  }
  {
    double _r_d1 = _d_Xo[1];
    _d_X[1] += _r_d1;
    _d_cam[4] += -_r_d1;
    _d_Xo[1] -= _r_d1;
    _d_Xo[1];
  }
  {
    double _r_d0 = _d_Xo[0];
    _d_X[0] += _r_d0;
    _d_cam[3] += -_r_d0;
    _d_Xo[0] -= _r_d0;
    _d_Xo[0];
  }
}

void compute_zach_weight_error_grad(const double w, clad::array_ref<double> _d_w) {
  double _t0;
  double _t1;
  _t1 = w;
  _t0 = w;
  double compute_zach_weight_error_return = 1 - _t1 * _t0;
  goto _label0;
  _label0:
  {
    double _r0 = -1 * _t0;
    * _d_w += _r0;
    double _r1 = _t1 * -1;
    * _d_w += _r1;
  }
}
